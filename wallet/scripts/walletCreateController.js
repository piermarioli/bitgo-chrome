/*
  Notes:
  - This controls the flow and manages all states involved with creating a new wallet
  - Manages: walletCreateName, walletCreateBackup
*/
angular.module('BitGo.Wallet.WalletCreateController', [])

.controller('WalletCreateController', ['$scope', '$rootScope', '$location', 'AnalyticsProxy',
  function($scope, $rootScope, $location, AnalyticsProxy) {
    // view states for the user settings area
    $scope.viewStates = ['label', 'backupkey', 'passcode', 'activate', 'insure'];
    // the current view state
    $scope.state = null;
    // template source for the current view
    $scope.createFlowTemplateSource = null;
    // the data model used by the ui-inputs during wallet creation
    $scope.inputs = null;
    // Additional properties that will be generated by steps in the process
    $scope.generated = null;

    // takes the user out of the wallet create flow
    // Accessible by all scopes inheriting this controller
    $scope.cancel = function() {
      // track the cancel
      AnalyticsProxy.track('CreateWalletCanceled');

      // Note: this redirect will also wipe all of the state that's been built up
      $location.path('/enterprise/' + $rootScope.enterprises.current.id + '/wallets');
    };

    // returns the view current view template (based on the $scope's current state)
    function getTemplate() {
      if (!$scope.state || _.indexOf($scope.viewStates, $scope.state) === -1) {
        throw new Error('Expect $scope.state to be defined when setting template for wallet create flow');
      }
      var tpl;
      switch ($scope.state) {
        case 'label':
          tpl = 'wallet/templates/wallet-create-partial-label.html';
          break;
        case 'backupkey':
          tpl = 'wallet/templates/wallet-create-partial-backupkey.html';
          break;
        case 'passcode':
          tpl = 'wallet/templates/wallet-create-partial-passcode.html';
          break;
        case 'activate':
          tpl = 'wallet/templates/wallet-create-partial-activate.html';
          break;
        case 'insure':
          tpl = 'wallet/templates/wallet-create-partial-insure.html';
          break;
      }
      return tpl;
    }

    // Event listeners
    var killStateWatch = $scope.$watch('state', function(state) {
      $scope.createFlowTemplateSource = getTemplate();
    });

    // Listener cleanup
    $scope.$on('$destroy', function() {
      killStateWatch();
    });

    function init() {
      $rootScope.setContext('createWallet');

      $scope.state = 'label';

      // All properties we expect the user to enter in creation
      $scope.inputs = {
        walletLabel: null,
        passcode: null,
        // used only when the user wants a wallet-specific password
        passcodeConfirm: null,
        // flag set to true if user provides their own backup
        useOwnBackupKey: false,
        // the xpub if user provides their own backup
        backupPubKey: null,
        activationCodeConfirm: null
      };

      // All properties we expect to possibly be generated during creation
      $scope.generated = {
        // Key/Keychain generated if the user provides their own xpub
        backupKeychain: null,
        backupKey: null,
        // Wallet keychains generated by BitGo to be used for the new wallet
        walletKeychain: null,
        walletBackupKeychain: null,
        bitgoKeychain: null,
        // Code that only gets put on the download to ensure the user
        // actually downloads the backup
        activationCode: null,
        // Code used to encrypt the passcode
        passcodeEncryptionCode: null,
        // The encrypted wallet passcode (used on the backup PDF)
        encryptedWalletPasscode: null,
        // The wallet (once it is created)
        wallet: null
      };
    }
    init();
  }
]);
